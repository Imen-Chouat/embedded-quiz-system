import Question from '../src/modules/Question.js';
import readline from 'readline';

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

async function askQuestion(query) {
    return new Promise(resolve => rl.question(query, answer => resolve(answer.trim())));
}

async function mainMenu() {
    while (true) {
        console.log("\nüîπ MENU PRINCIPAL");
        console.log("1Ô∏è‚É£ Ajouter une question");
        console.log("2Ô∏è‚É£ Rechercher une question par ID");
        console.log("3Ô∏è‚É£ Rechercher une question par texte");
        console.log("4Ô∏è‚É£ Mettre √† jour une question");
        console.log("5Ô∏è‚É£ Supprimer une question");
        console.log("6Ô∏è‚É£ Afficher toutes les questions d'un quiz");
        console.log("7Ô∏è‚É£ V√©rifier si une question est expir√©e");
        console.log("0Ô∏è‚É£ Quitter");

        const choice = await askQuestion("Choisissez une option : ");

        switch (choice) {
            case '1': await createQuestion(); break;
            case '2': await searchQuestionById(); break;
            case '3': await searchQuestionsByText(); break;
            case '4': await updateQuestionText(); break;
            case '5': await deleteQuestion(); break;
            case '6': await getQuestionsByQuiz(); break;
            case '7': await checkQuestionExpiration(); break;
            case '0': console.log("üëã Fin du programme !"); rl.close(); return;
            default: console.log("‚ùå Option invalide. Essayez encore.");
        }
    }
}

// ‚úÖ Ajouter une question
async function createQuestion() {
    try {
        const quiz_id = await askQuestion("Entrez l'ID du quiz : ");
        const question_text = await askQuestion("Entrez la question : ");
        const duration_seconds = await askQuestion("Entrez la dur√©e en secondes (laisser vide pour illimit√©) : ");

        const newQuestion = await Question.createQuestion({
            quiz_id: Number(quiz_id),
            question_text,
            duration_seconds: duration_seconds ? Number(duration_seconds) : null
        });

        console.log(`‚úÖ Question cr√©√©e avec l'ID: ${newQuestion.id}`);
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de la question :", error.message);
    }
}

// ‚úÖ Rechercher une question par ID
async function searchQuestionById() {
    try {
        const id = await askQuestion("Entrez l'ID de la question √† rechercher : ");
        const question = await Question.getQuestionById(Number(id));

        if (!question || question.error) {
            console.log("‚ùå Question non trouv√©e.");
        } else {
            console.log(`üîé R√©sultat : ${JSON.stringify(question, null, 2)}`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la recherche :", error.message);
    }
}

// ‚úÖ Rechercher une question par texte
async function searchQuestionsByText() {
    try {
        const text = await askQuestion("Entrez le texte √† rechercher : ");
        const questions = await Question.searchQuestions(text);

        if (questions.length === 0) {
            console.log("‚ùå Aucune question trouv√©e.");
        } else {
            console.log(`üîé R√©sultats : ${JSON.stringify(questions, null, 2)}`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la recherche :", error.message);
    }
}

// ‚úÖ Mettre √† jour le texte d'une question
async function updateQuestionText() {
    try {
        const id = await askQuestion("Entrez l'ID de la question √† mettre √† jour : ");
        const newText = await askQuestion("Entrez le nouveau texte : ");

        const result = await Question.updateQuestionText(Number(id), { question_text: newText });

        if (result.error) {
            console.log("‚ùå Erreur :", result.error);
        } else {
            console.log("‚úÖ Question mise √† jour.");
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour :", error.message);
    }
}

// ‚úÖ Supprimer une question
async function deleteQuestion() {
    try {
        const id = await askQuestion("Entrez l'ID de la question √† supprimer : ");

        const result = await Question.deleteQuestion(Number(id));

        if (result.error) {
            console.log("‚ùå Erreur :", result.error);
        } else {
            console.log("‚úÖ Question supprim√©e.");
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression :", error.message);
    }
}

// ‚úÖ R√©cup√©rer toutes les questions d'un quiz
async function getQuestionsByQuiz() {
    try {
        const quiz_id = await askQuestion("Entrez l'ID du quiz : ");
        const questions = await Question.getQuizQuestions(Number(quiz_id));

        if (questions.length === 0) {
            console.log("‚ùå Aucune question trouv√©e.");
        } else {
            console.log(`üìú Questions : ${JSON.stringify(questions, null, 2)}`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des questions :", error.message);
    }
}

// ‚úÖ V√©rifier si une question est expir√©e
async function checkQuestionExpiration() {
    try {
        const id = await askQuestion("Entrez l'ID de la question √† v√©rifier : ");

        const result = await Question.isQuestionExpired(Number(id));

        if (result.error) {
            console.log("‚ùå Erreur :", result.error);
        } else {
            console.log(result.expired 
                ? "‚è≥ Temps √©coul√© !"
                : `‚è≥ Temps restant : ${result.remaining} secondes`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification :", error.message);
    }
}

// üéØ Lancer le menu
mainMenu();


 
