import React, { useCallback, useEffect, useState, useContext } from 'react';
import { View, Text, Image, TouchableOpacity, ScrollView, Alert } from 'react-native';
import { UserContext } from '../Navigation';  // Assuming UserContext is used for managing auth state
import styles from './Modules.styles';  // Ensure styles are correctly imported

// Constants for the bottom navigation bar
const TAB_CONFIG = [
  { key: 'home', label: 'Home', icon: require('../assets/home.png') },
  { key: 'grade', label: 'Modules', icon: require('../assets/image.png') },
  { key: 'account', label: 'Account', icon: require('../assets/acc.png') },
];

const Modules = ({ navigation }) => {
  const { user } = useContext(UserContext);
  const [modulesData, setModulesData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('grade');

  useEffect(() => {
    const fetchModules = async () => {
      if (!user?.accessToken) return;

      setIsLoading(true);

      try {
        const response = await fetch('http://10.42.0.1:7000/api/result/modules', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${user?.accessToken}`,
          },
        });

        const data = await response.json();

        if (data?.modules) {
          setModulesData(data.modules);
        } else {
          Alert.alert('Error', 'Modules not found.');
        }
      } catch (error) {
        console.error('Error fetching modules:', error);
        Alert.alert('Error', 'Failed to load modules. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchModules();
  }, [user?.accessToken, user?.id]);

  const handleTabPress = useCallback((tabKey) => {
    setActiveTab(tabKey);

    if (tabKey === 'home') {
      navigation.navigate('Home');
    } else if (tabKey === 'grade') {
      navigation.navigate('Modules');
    } else if (tabKey === 'account') {
      navigation.navigate('ProfileScreen');
    }
  }, [navigation]);

  const handleModulePress = useCallback((moduleId) => {
    navigation.navigate('ModuleDetails', { moduleId });
  }, [navigation]);

  // Function to get different module icons based on index
  const getModuleIcon = (index) => {
    const icons = [
      require('../assets/s1.png'),
      require('../assets/s2.png'),
      require('../assets/s3.png'),
      require('../assets/s4.png')
    ];
    return icons[index % icons.length];
  };

  // Function to get different module button styles based on index
  const getModuleStyle = (index) => {
    const buttonStyles = ['button1', 'button2', 'button3', 'button4'];
    return buttonStyles[index % buttonStyles.length];
  };

  return (
    <View style={styles.mainContainer}>
      {/* Back arrow */}
      <TouchableOpacity 
        style={styles.backButton} 
        onPress={() => navigation.goBack()}
        activeOpacity={0.7}
      >
        <Image source={require('../assets/list.png')} style={styles.backIcon} />
      </TouchableOpacity>
      
      {/* Title Section */}
      <View style={styles.titleSection}>
        <Text style={styles.title}>My Modules</Text>
      </View>

      {/* Scrollable Module List */}
      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.buttonGroup}
        showsVerticalScrollIndicator={false}
      >
        {isLoading ? (
          <Text style={styles.loadingText}>Loading modules...</Text>
        ) : modulesData.length > 0 ? (
          modulesData.map((module, index) => (
            <TouchableOpacity
              key={module._id}
              style={[styles.button, styles[getModuleStyle(index)]]}
              onPress={() => handleModulePress(module._id)}
              activeOpacity={0.8}
            >
              <View style={styles.buttonTextContainer}>
                <Text style={styles.buttonTitle}>{module.name}</Text>
                <Text style={styles.buttonSubtitle}>{module.subtitle || 'Subject area'}</Text>
                <Text style={styles.buttonDetails}>{module.teacher || 'Teacher info not available'}</Text>
              </View>
              <Image source={getModuleIcon(index)} style={styles.buttonIcon} />
            </TouchableOpacity>
          ))
        ) : (
          <Text style={styles.noModulesText}>No modules available</Text>
        )}
      </ScrollView>

      {/* Bottom Navigation */}
      <View style={styles.bottomBar}>
        {TAB_CONFIG.map((tab) => (
          <TouchableOpacity 
            key={tab.key} 
            style={styles.tab} 
            onPress={() => handleTabPress(tab.key)}
            activeOpacity={0.7}
          >
            {tab.key === activeTab ? (
              <View style={styles.activeTab}>
                <View style={styles.whiteOuterCircle}>
                  <View style={styles.yellowCircle}>
                    <Image source={tab.icon} style={styles.activeIcon} />
                  </View>
                </View>
                <Text style={styles.activeLabel}>{tab.label}</Text>
              </View>
            ) : (
              <>
                <Image source={tab.icon} style={styles.inactiveIcon} />
                <Text style={styles.tabLabel}>{tab.label}</Text>
              </>
            )}
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );
};

export default Modules;
