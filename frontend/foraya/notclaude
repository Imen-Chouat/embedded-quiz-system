
// App.js - Main Entry Point
import React, { useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { StatusBar } from 'react-native';
import io from 'socket.io-client';
import { QuizNotificationProvider } from './context/QuizNotificationContext';
import HomeScreen from './screens/HomeScreen';
import QuizScreen from './screens/QuizScreen';
import NotificationModal from './components/NotificationModal';

const Stack = createStackNavigator();

const App = () => {
  return (
    <NavigationContainer>
      <QuizNotificationProvider>
        <StatusBar barStyle="dark-content" />
        <Stack.Navigator>
          <Stack.Screen name="Home" component={HomeScreen} />
          <Stack.Screen name="QuizScreen" component={QuizScreen} />
          {/* Add other screens of your app */}
        </Stack.Navigator>
        <NotificationModal />
      </QuizNotificationProvider>
    </NavigationContainer>
  );
};

export default App;

// context/QuizNotificationContext.js - Context to manage quiz notifications across the app
import React, { createContext, useState, useContext, useEffect } from 'react';
import io from 'socket.io-client';

// Replace with your Raspberry Pi IP and port
const SOCKET_URL = 'http://172.20.10.12:7000';

const QuizNotificationContext = createContext();

export const useQuizNotification = () => useContext(QuizNotificationContext);

export const QuizNotificationProvider = ({ children }) => {
  const [notification, setNotification] = useState(null);
  const [socket, setSocket] = useState(null);

  // Initialize socket connection
  useEffect(() => {
    const socketInstance = io(SOCKET_URL);
    setSocket(socketInstance);

    // Clean up on unmount
    return () => {
      if (socketInstance) {
        socketInstance.disconnect();
      }
    };
  }, []);

  // Listen for notifications
  useEffect(() => {
    if (!socket) return;

    socket.on('new-notification', (data) => {
      console.log('Quiz notification received:', data);
      // Show notification with quiz data
      setNotification({
        message: data.message || 'A new quiz is available!',
        quizId: data.quizId || null,
        timestamp: new Date(),
        // Add other quiz metadata as needed
      });
    });

    return () => {
      socket.off('new-notification');
    };
  }, [socket]);

  // Clear notification
  const dismissNotification = () => {
    setNotification(null);
  };

  const value = {
    notification,
    dismissNotification,
    socket
  };

  return (
    <QuizNotificationContext.Provider value={value}>
      {children}
    </QuizNotificationContext.Provider>
  );
};

// components/NotificationModal.js - Modal component for quiz notifications
import React from 'react';
import { Modal, View, Text, StyleSheet, TouchableOpacity, Animated } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { useQuizNotification } from '../context/QuizNotificationContext';

const NotificationModal = () => {
  const { notification, dismissNotification } = useQuizNotification();
  const navigation = useNavigation();

  if (!notification) return null;

  const handleStartQuiz = () => {
    // Navigate to quiz screen with the quiz ID
    navigation.navigate('QuizScreen', { 
      quizId: notification.quizId 
    });
    dismissNotification();
  };

  const handleDismiss = () => {
    dismissNotification();
  };

  return (
    <Modal
      transparent
      animationType="fade"
      visible={!!notification}
      onRequestClose={handleDismiss}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <Text style={styles.title}>Quiz Time!</Text>
          <Text style={styles.message}>{notification.message}</Text>
          
          <View style={styles.buttonContainer}>
            <TouchableOpacity 
              style={[styles.button, styles.dismissButton]} 
              onPress={handleDismiss}
            >
              <Text style={styles.dismissButtonText}>Later</Text>
            </TouchableOpacity>
            
            <TouchableOpacity 
              style={[styles.button, styles.startButton]} 
              onPress={handleStartQuiz}
            >
              <Text style={styles.startButtonText}>Start Quiz</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 24,
    width: '90%',
    maxWidth: 400,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 12,
    textAlign: 'center',
  },
  message: {
    fontSize: 16,
    marginBottom: 24,
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  button: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginHorizontal: 8,
  },
  startButton: {
    backgroundColor: '#4CAF50',
  },
  startButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  dismissButton: {
    backgroundColor: '#f0f0f0',
  },
  dismissButtonText: {
    color: '#666',
    fontSize: 16,
  },
});

export default NotificationModal;

// screens/HomeScreen.js - Example home screen
import React from 'react';
import { View, Text, StyleSheet, Button } from 'react-native';
import { useQuizNotification } from '../context/QuizNotificationContext';

const HomeScreen = ({ navigation }) => {
  const { socket } = useQuizNotification();
  
  // For testing - simulate receiving a notification
  const simulateNotification = () => {
    if (socket) {
      // This is just for testing in development
      // In production, notifications would come from the server
      socket.emit('request-notification');
    } else {
      console.log('Socket not connected');
    }
  };
  
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Home Screen</Text>
      <Text style={styles.subtitle}>Your app content goes here</Text>
      
      {/* This button is just for testing during development */}
      <Button 
        title="Simulate Quiz Notification" 
        onPress={simulateNotification} 
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 32,
    color: '#666',
  },
});

export default HomeScreen;

// screens/QuizScreen.js - The actual quiz screen
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';

const QuizScreen = ({ route }) => {
  const { quizId } = route.params || {};
  const [quiz, setQuiz] = useState(null);
  const [loading, setLoading] = useState(true);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [completed, setCompleted] = useState(false);

  // Fetch quiz data when component mounts
  useEffect(() => {
    // In a real app, you would fetch the quiz data from your API
    // For this example, we'll use mock data
    setTimeout(() => {
      setQuiz({
        id: quizId || '123',
        title: 'Sample Quiz',
        questions: [
          {
            id: '1',
            text: 'What is React Native?',
            options: [
              { id: 'a', text: 'A JavaScript framework' },
              { id: 'b', text: 'A mobile app development framework' },
              { id: 'c', text: 'A styling library' },
              { id: 'd', text: 'A backend technology' },
            ],
            correctAnswer: 'b',
          },
          {
            id: '2',
            text: 'Which company developed React Native?',
            options: [
              { id: 'a', text: 'Google' },
              { id: 'b', text: 'Microsoft' },
              { id: 'c', text: 'Facebook (Meta)' },
              { id: 'd', text: 'Amazon' },
            ],
            correctAnswer: 'c',
          },
          {
            id: '3',
            text: 'What language is used to write React Native apps?',
            options: [
              { id: 'a', text: 'Java' },
              { id: 'b', text: 'Swift' },
              { id: 'c', text: 'C++' },
              { id: 'd', text: 'JavaScript/TypeScript' },
            ],
            correctAnswer: 'd',
          },
        ],
      });
      setLoading(false);
    }, 1000);
  }, [quizId]);

  const handleAnswer = (questionId, answerId) => {
    setAnswers({
      ...answers,
      [questionId]: answerId,
    });
  };

  const handleNext = () => {
    if (currentQuestion < quiz.questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      // Quiz completed
      setCompleted(true);
      // In a real app, you would submit answers to your backend
      console.log('Quiz completed! Answers:', answers);
    }
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <Text>Loading quiz...</Text>
      </View>
    );
  }

  if (completed) {
    // Calculate score
    const correctAnswers = quiz.questions.filter(
      (q) => answers[q.id] === q.correctAnswer
    ).length;
    
    return (
      <View style={styles.container}>
        <Text style={styles.title}>Quiz Completed!</Text>
        <Text style={styles.score}>
          Score: {correctAnswers} out of {quiz.questions.length}
        </Text>
        <Text style={styles.scorePercent}>
          {Math.round((correctAnswers / quiz.questions.length) * 100)}%
        </Text>
      </View>
    );
  }

  const question = quiz.questions[currentQuestion];

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.quizTitle}>{quiz.title}</Text>
      <View style={styles.progressBar}>
        <View 
          style={[
            styles.progressFill, 
            { width: `${((currentQuestion + 1) / quiz.questions.length) * 100}%` }
          ]} 
        />
      </View>
      <Text style={styles.progressText}>
        Question {currentQuestion + 1} of {quiz.questions.length}
      </Text>
      
      <View style={styles.questionContainer}>
        <Text style={styles.questionText}>{question.text}</Text>
        
        {question.options.map((option) => (
          <TouchableOpacity
            key={option.id}
            style={[
              styles.optionButton,
              answers[question.id] === option.id && styles.selectedOption,
            ]}
            onPress={() => handleAnswer(question.id, option.id)}
          >
            <Text style={[
              styles.optionText,
              answers[question.id] === option.id && styles.selectedOptionText
            ]}>
              {option.text}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
      
      <TouchableOpacity
        style={[
          styles.nextButton,
          !answers[question.id] && styles.disabledButton,
        ]}
        onPress={handleNext}
        disabled={!answers[question.id]}
      >
        <Text style={styles.nextButtonText}>
          {currentQuestion < quiz.questions.length - 1 ? 'Next Question' : 'Finish Quiz'}
        </Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  quizTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  progressBar: {
    height: 8,
    backgroundColor: '#e0e0e0',
    borderRadius: 4,
    marginBottom: 8,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
    borderRadius: 4,
  },
  progressText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 24,
    textAlign: 'center',
  },
  questionContainer: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 2,
  },
  questionText: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 20,
  },
  optionButton: {
    backgroundColor: '#f9f9f9',
    padding: 16,
    borderRadius: 8,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  selectedOption: {
    backgroundColor: '#e7f3ff',
    borderColor: '#2196F3',
  },
  optionText: {
    fontSize: 16,
  },
  selectedOptionText: {
    fontWeight: '600',
    color: '#2196F3',
  },
  nextButton: {
    backgroundColor: '#4CAF50',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 10,
  },
  disabledButton: {
    backgroundColor: '#a5d6a7',
    opacity: 0.7,
  },
  nextButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  score: {
    fontSize: 18,
    marginBottom: 8,
    textAlign: 'center',
  },
  scorePercent: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#4CAF50',
    textAlign: 'center',
  },
});

export default QuizScreen;